package com.dood.kotlin.basicstuff.lambdas

import com.dood.kotlin.basicstuff.classesAndSuch.UserDataClass

//note you can do this in java too, just requires more code
//(Int) -> (Boolean)
var divisibleByTwo: (Int) -> Boolean = { it % 2 == 0 }
var lessThanTwo: (Int) -> Boolean = { it < 2 }

//note you don't have to specify input type if compiler can infer it
val altLessThanTwo = { x: Int -> x < 2 }

//anonymous function ie no name
val anonFunLessThanTwo = fun(x: Int): Boolean = x < 2

//using an existing function (filter takes a predicate).  figure this out
val stringFilter = String::filter
val stringLength = String::length

val sum = { x: Int, y: Int -> x + y }

fun main(args: Array<String>) {
//    note missing age for the first user, named param for 3rd param
    val users = listOf(
        UserDataClass("Snarple", address = null), UserDataClass("fark", 22, null),
        UserDataClass("Hargh", 3, null)
    )
    findTheOldestPerson(users)
    //lots of examples of it.blah, ie autogenerated param in a lambda  don't use it on nested lambdas
    println("heres a better way: ${users.maxBy { it.age }}")
    //kotlin allows moving the lambda out of an arg list if it is the last arg, note parens
    println("yet another way ${users.maxBy() { u: UserDataClass -> u.age }}")
    //if lambda is only arg, you can remove parens
    println("when the lambda is the only arg to a fun note no parens for maxBy ${users.maxBy { u: UserDataClass -> u.age }}")
    println("when the lambda is the only arg to a fun note no parens for maxBy ${users.maxBy { u: UserDataClass -> u.age }}")
    println("not concise: ${users.maxBy { p: UserDataClass -> p.age }}") //param type explicit
    println("concise: ${users.maxBy { it.age }}") //param type inferred

    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    println("evenNumbers ${numbers.filter(divisibleByTwo)}")
    println("less than two: ${numbers.filter(lessThanTwo)}")
    println("altless than two: ${numbers.filter(altLessThanTwo)}")
    println("anonless than two: ${numbers.filter(anonFunLessThanTwo)}")

    println("sum ${sum(1, 3)}")
    passingLambdaAsNamedArg(users)
}

private fun passingLambdaAsNamedArg(people: List<UserDataClass>) {
    val names = people.joinToString(
        separator = " ",
        transform = { p: UserDataClass -> p.name }) //uses a named arg, ie transform
    println("names= $names")

    val namesWithLambdaOutsideOfParams =
        people.joinToString(" ") { p: UserDataClass -> p.name } //extract lambda out of parens
    println("lambdaout of params = $namesWithLambdaOutsideOfParams")
}

private fun findTheOldestPerson(people: List<UserDataClass>) {
    println("finding the olderst person the old school loopy way")
    var maxAge = 0
    var theOldest: UserDataClass? = null
    for (user in people) {
        if (user.age > maxAge) {
            maxAge = user.age
            theOldest = user
        }
    }
    println(theOldest)
}